 # Usage:
    #   aws cloudformation --region <region> create-stack --stack-name <stack name> --template-body file://shortenUrl-cnf-infra.yaml

    # Template will help to create following:
    #
    #       2 Public Subnets
    #       ELB and ALB
    #
    Parameters:
      SSHLocation:
        Description: The IP address range that can be used to SSH to the EC2 instances
        Type: String
        MinLength: 9
        MaxLength: 18
        Default: 0.0.0.0/0
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Resources:
      WebServerGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          AvailabilityZones: !GetAZs ''
          LaunchConfigurationName: !Ref 'LaunchConfig'
          MinSize: '2'
          MaxSize: '4'
          LoadBalancerNames: [ !Ref 'ElasticLoadBalancer' ]

      LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Metadata:
          AWS::CloudFormation::Init:
            configSets:
              InstallAndRun:
                - Install
            Install:
              packages:
                yum:
                  git: [ ]
              files:
                /home/ec2-user/aws_host.properties:
                  content: !Join [ '', [ 'AWS_HOST:', !GetAtt [ ElasticLoadBalancer, DNSName ] ] ]
                  mode: '000644'
                  owner: ec2-user
                  group: ec2-user
        Properties:
          InstanceType: t2.micro
          ImageId: ami-03657b56516ab7912
          KeyName: myawskey
          SecurityGroups: [!Ref 'InstanceSecurityGroup']
          UserData:
            'Fn::Base64': !Sub |
              #!/bin/bash -ex
              yum update -y aws-cfn-bootstrap
              yum update -y
              amazon-linux-extras install docker
              yum install docker
              service docker start
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets InstallAndRun --region ${AWS::Region}
              # Signal the status from cfn-init (via $?)
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
              groupadd docker
              usermod -aG docker ec2-user

      WebServerScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
          AdjustmentType: ChangeInCapacity
          AutoScalingGroupName: !Ref 'WebServerGroup'
          Cooldown: '60'
          ScalingAdjustment: 1
      WebServerScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
          AdjustmentType: ChangeInCapacity
          AutoScalingGroupName: !Ref 'WebServerGroup'
          Cooldown: '60'
          ScalingAdjustment: -1
      CPUAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
          AlarmDescription: Scale-up if CPU > 90% for 10 minutes
          MetricName: CPUUtilization
          Namespace: AWS/EC2
          Statistic: Average
          Period: 300
          EvaluationPeriods: 2
          Threshold: 90
          AlarmActions: [!Ref 'WebServerScaleUpPolicy']
          Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref 'WebServerGroup'
          ComparisonOperator: GreaterThanThreshold
      CPUAlarmLow:
        Type: AWS::CloudWatch::Alarm
        Properties:
          AlarmDescription: Scale-down if CPU < 70% for 10 minutes
          MetricName: CPUUtilization
          Namespace: AWS/EC2
          Statistic: Average
          Period: 300
          EvaluationPeriods: 2
          Threshold: 70
          AlarmActions: [!Ref 'WebServerScaleDownPolicy']
          Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref 'WebServerGroup'
          ComparisonOperator: LessThanThreshold
      ElasticLoadBalancer:
        Type: AWS::ElasticLoadBalancing::LoadBalancer
        Properties:
          LoadBalancerName: 'myshorturl'
          AvailabilityZones: !GetAZs ''
          CrossZone: true
          Listeners:
          - LoadBalancerPort: '80'
            InstancePort: '80'
            Protocol: HTTP
          HealthCheck:
            Target: HTTP:80/
            HealthyThreshold: '3'
            UnhealthyThreshold: '5'
            Interval: '30'
            Timeout: '5'
      InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Enable SSH access and HTTP from the load balancer only
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref 'SSHLocation'
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupOwnerId: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.OwnerAlias]
            SourceSecurityGroupName: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.GroupName]
    Outputs:
      URL:
        Description: The URL of the website
        Value: !Join [ '', [ 'http://', !GetAtt [ ElasticLoadBalancer, DNSName ] ] ]