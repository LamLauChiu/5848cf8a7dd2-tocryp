from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from jproperties import Properties
import random
import string


"""Load app-config.properties"""

configs = Properties()
with open('app-config.properties', 'rb') as config_file:
    configs.load(config_file)

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = configs.get("SQLITE_DATABASE_URI").data
#app.config['SQLALCHEMY_DATABASE_URI'] = configs.get("POSTGRES_DATABASE_URI").data
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

"""
UrlsDBModel is a class object to create a DB object with three column in the database
id column  is a primary Key and auto generated by database
long column is used to store long url in the database table
short column is used to store short url in the database table

"""


class UrlsdbModel(db.Model):
    id_ = db.Column("id_", db.Integer, primary_key=True)
    long = db.Column("long", db.String())
    short = db.Column("short", db.String(10))

    def __init__(self, long, short):
        self.long = long
        self.short = short


class ipsdbModel(db.Model):
    id_ = db.Column("id_", db.Integer, primary_key=True)
    ipa = db.Column("ipa", db.String(20))
    ipb = db.Column("ipb", db.String(20))
    limit = db.Column("limit", db.String(20))
    time = db.Column("time", db.String(20))

    def __init__(self, ipa, ipb, limit, time):
        self.ipa = ipa
        self.ipb = ipb
        self.limit = limit
        self.time = time

"""
This function is used to create the databased as per decorator means before very first request database will be created.
"""


@app.before_first_request
def create_db_models():
    db.create_all()


"""
Function is use to generate shorten alphanumeric string of 7 digits.
digit generation is configuration from app-config.properties.
"""


def get_alphanum_str():
    letters = string.ascii_lowercase + string.ascii_uppercase + string.digits
    while True:
        rand_letters = random.choices(letters, k=int(configs.get("SHORT_URL_LEN").data))
        rand_letters = "".join(rand_letters)
        short_url = UrlsdbModel.query.filter_by(short=rand_letters).first()
        if not short_url:
            return rand_letters


"""
This function is used  to  route the http traffic based on POST and GET parameters

POST : DB model wil check the received long url in the database and if the url found in database
it will display on the HTML page. if its not found in the database this function will generate the 
shorten url by calling get_alphanum_str function and then insert the new shorten url in database

"""


@app.route('/', methods=['POST', 'GET'])
def homepage():
    if request.method == "POST":
        url_received = request.form["nm"]
        found_url = UrlsdbModel.query.filter_by(long=url_received).first()

        if found_url:
            return redirect(url_for("display_short_url", url=found_url.short))
        else:
           short_url = get_alphanum_str()
           new_url = UrlsdbModel(url_received, short_url)
           db.session.add(new_url)
           db.session.commit()
           return redirect(url_for("display_short_url", url=short_url))
    else:
       return render_template('url_page.html')


@app.route('/limitrange', methods=['POST', 'GET'])
def limit_range():
    if request.method == "POST":
        ipa = request.form["ipa"]
        ipb = request.form["ipb"]
        limit = request.form["limit"]
        time = request.form["time"]

        last_octet_range_a = int(ipa[-3:])
        last_octet_range_b = int(ipb[-3:])

        if last_octet_range_a < last_octet_range_b:

            #ToDo: check the count from db before inserting into DB

            print("valid request for 60 second")
            request_data = ipsdbModel(ipa, ipb, limit, time)
            db.session.add(request_data)
            db.session.commit()

        else:
            print("request is not valid")

    return render_template('limit_range.html')




"""

This function is used to redirect the short url to long url

"""


@app.route('/<short_url>')
def redirection(short_url):
    long_url = UrlsdbModel.query.filter_by(short=short_url).first()
    if long_url:
        return redirect(long_url.long)
    else:
        return f'<h1>Url doesnt exist</h1>'


@app.route('/display/<url>')
def display_short_url(url):
    return render_template('short_url.html', short_url_display=url, aws_host=configs.get("AWS_HOST").data)


""" 

function used to display the all historical url listed for shorten

"""


@app.route('/reported_urls')
def reported_all():
    return render_template('reported_urls.html', vals=UrlsdbModel.query.all())


if __name__ == '__main__':

    app.run(port=5000, debug=True)
